const TextFunction = async (ctx: any, User: any, proyekt: any) => {
  const message = ctx.update.message.text;
  const id = ctx.update.message.from.id;
  const textMain = `üíÅ‚Äç‚ôÄÔ∏è –ü—Ä–æ–µ–∫—Ç: <i>${message}</i>\n–¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ä–µ—Å—É—Ä—Å.\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª, —Ç–∞–∫ –∏ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.\n–ß—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ —Å–≤—è–∑—ã–≤–∞—Ç—å?`;
  const user = await User.findOne({ where: { telegramId: id, activ: true } });
  if (user.editTarif == null) {
    const project = await proyekt.create({
      name: message,
      userId: user.id,
    });
    await User.update(
      {
        editTarif: project.id,
      },
      {
        where: {
          telegramId: id,
        },
      }
    );
  } else {
    return await ctx.telegram.sendMessage(id, "–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç");
  }
  await ctx.telegram.sendMessage(id, textMain, {
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "–ß–∞—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data: "channel" },
          { text: "–ß–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", callback_data: "group" },
        ],
        [{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
      ],
    },
  });
  return;
};
const Cancel = async (ctx: any, User: any) => {
  // console.log(ctx);
  const id = ctx.update.callback_query.from.id;
  const updateId = ctx.update.callback_query.id;
  const messageId = ctx.update.callback_query.message?.message_id;
  await User.update(
    {
      editTarif: null,
    },
    {
      where: {
        telegramId: id,
      },
    }
  );
  await ctx.telegram.editMessageText(
    id,
    messageId,
    updateId,
    "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é \n"
  );
  return ctx.wizard.selectStep(0);

  // ctx.telegram.editMessageReplyMarkup(id,messageId,,);
  // await ctx.deleteMessage();
};

const Channel = async (ctx: any, User: any) => {
  const id = ctx.update.callback_query.from.id;
  const updateId = String(ctx.update.callback_query.id);
  const messageId: number = Number(
    ctx.update.callback_query.message?.message_id
  );

  await User.update(
    {
      editTarif: null,
    },
    {
      where: {
        telegramId: id,
      },
    }
  );
  const text = `‚ÑπÔ∏è <i>1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è @bot –≤ –∞–¥–º–∏–Ω–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n2. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n3.–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–Ω–∞–ª–∞ (–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç).
      <b>–í —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è...</b></i>`;
  ctx.telegram.editMessageText(id, messageId, updateId, text, {
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ù–∞–∑–∞–¥", callback_data: "back" }],
        [{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
      ],
    },
  });
  // console.log(ctx.stage);
  return ctx.wizard.next({});
};
const Group = async (ctx: any, User: any) => {
  const id = ctx.update.callback_query.from.id;
  const updateId = String(ctx.update.callback_query.id);
  const messageId: number = Number(
    ctx.update.callback_query.message?.message_id
  );
  await User.update(
    {
      editTarif: null,
    },
    {
      where: {
        telegramId: id,
      },
    }
  );
  const text = `‚ÑπÔ∏è <i>1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è @bot –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã\n2. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n3.–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç).
  <b>–í —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è...</b></i>`;
  ctx.telegram.editMessageText(id, messageId, updateId, text, {
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ù–∞–∑–∞–¥", callback_data: "back" }],
        [{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
      ],
    },
  });
  // console.log(ctx.stage);
  return ctx.wizard.next({});
};

const Back = async (ctx: any, User: any) => {
  const id = ctx.update.callback_query.from.id;
  const updateId = String(ctx.update.callback_query.id);
  const messageId: number = Number(
    ctx.update.callback_query.message?.message_id
  );

  await User.update(
    {
      editTarif: null,
    },
    {
      where: {
        telegramId: id,
      },
    }
  );
  const textMain = `üíÅ‚Äç‚ôÄÔ∏è –ü—Ä–æ–µ–∫—Ç: <i>${id}</i>
  
  –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ä–µ—Å—É—Ä—Å.

  –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ —á–∞—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª, —Ç–∞–∫ –∏ —á–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É.

  –ß—Ç–æ –≤—ã –ø–æ–¥–∫–ª—é—á–∞–µ—Ç–µ?`;
  ctx.telegram.editMessageText(id, messageId, updateId, textMain, {
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "–ß–∞—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data: "channel" },
          { text: "–ß–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", callback_data: "group" },
        ],
        [{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
      ],
    },
  });
  return ctx.wizard.back();
};

module.exports = {
  TextFunction,
  Cancel,
  Group,
  Channel,
  Back,
};
