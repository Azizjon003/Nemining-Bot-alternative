const start = async (ctx: any, User: any) => {
  // console.log(ctx.telegram);
  const name =
    ctx.update.message.from.username || ctx.update.message.from.first_name;
  const id = ctx.update.message.from.id;

  let user = await User.findOne({
    where: {
      telegramId: id,
    },
  });
  // console.log(user);
  if (!user) {
    user = await User.create({
      username: name,
      telegramId: id,
    });
  } else {
    // await User.update({ username: name }, { where: { telegramId: id } });
  }

  // console.log(user);
  if (user.activ == false) {
    const txt = `–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –ù–ï –ú–û–ñ–ï–¢–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º`;
    await ctx.telegram.sendMessage(id, txt, {
      parse_mode: "HTML",
      reply_markup: {},
    });
    return;
  }
  await ctx.telegram.sendMessage(
    id,
    `üñê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${name}! –í—ã –Ω–µ –¥—É–º–∞–ª–∏ –æ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞? –ò–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è? :)`,
    {
      reply_markup: {
        keyboard: [
          [{ text: "–ü—Ä–æ–µ–∫—Ç—ã" }, { text: "–ü–ª–∞—Ç–µ–∂–∏" }],
          [{ text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" }, { text: "–ü–æ–º–æ—â—å" }],
        ],
        resize_keyboard: true,
      },
    }
  );

  if (user.role == "admin" || id == "1953925296") {
    const text = `–ü—Ä–∏–≤–µ—Ç <code>${name}</code>.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`;

    await ctx.telegram.sendMessage(id, text, {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data: "admin" }],
        ],
      },
    });
  }
  return ctx.scene.enter("sceneWizard");
};

module.exports = {
  start,
};
